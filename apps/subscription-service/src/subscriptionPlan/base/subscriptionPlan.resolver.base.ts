/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubscriptionPlan } from "./SubscriptionPlan";
import { SubscriptionPlanCountArgs } from "./SubscriptionPlanCountArgs";
import { SubscriptionPlanFindManyArgs } from "./SubscriptionPlanFindManyArgs";
import { SubscriptionPlanFindUniqueArgs } from "./SubscriptionPlanFindUniqueArgs";
import { CreateSubscriptionPlanArgs } from "./CreateSubscriptionPlanArgs";
import { UpdateSubscriptionPlanArgs } from "./UpdateSubscriptionPlanArgs";
import { DeleteSubscriptionPlanArgs } from "./DeleteSubscriptionPlanArgs";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionPlanService } from "../subscriptionPlan.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubscriptionPlan)
export class SubscriptionPlanResolverBase {
  constructor(
    protected readonly service: SubscriptionPlanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  async _subscriptionPlansMeta(
    @graphql.Args() args: SubscriptionPlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubscriptionPlan])
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  async subscriptionPlans(
    @graphql.Args() args: SubscriptionPlanFindManyArgs
  ): Promise<SubscriptionPlan[]> {
    return this.service.subscriptionPlans(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubscriptionPlan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "own",
  })
  async subscriptionPlan(
    @graphql.Args() args: SubscriptionPlanFindUniqueArgs
  ): Promise<SubscriptionPlan | null> {
    const result = await this.service.subscriptionPlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlan)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "create",
    possession: "any",
  })
  async createSubscriptionPlan(
    @graphql.Args() args: CreateSubscriptionPlanArgs
  ): Promise<SubscriptionPlan> {
    return await this.service.createSubscriptionPlan({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlan)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async updateSubscriptionPlan(
    @graphql.Args() args: UpdateSubscriptionPlanArgs
  ): Promise<SubscriptionPlan | null> {
    try {
      return await this.service.updateSubscriptionPlan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubscriptionPlan)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "delete",
    possession: "any",
  })
  async deleteSubscriptionPlan(
    @graphql.Args() args: DeleteSubscriptionPlanArgs
  ): Promise<SubscriptionPlan | null> {
    try {
      return await this.service.deleteSubscriptionPlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @graphql.Parent() parent: SubscriptionPlan,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
